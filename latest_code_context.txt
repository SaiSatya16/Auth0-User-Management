// File: src/App.vue
<template>
  <div class="app-container">
    <nav class="navbar navbar-expand-lg">
      <div class="container-fluid">
        <router-link class="navbar-brand" to="/">User Management</router-link>
        <div class="d-flex">
          <button class="btn theme-toggle" @click="toggleTheme">
            <i :class="isDark ? 'bi bi-sun' : 'bi bi-moon'"></i>
          </button>
        </div>
      </div>
    </nav>
    <div class="container mt-4">
      <router-view />
    </div>
  </div>
</template>

<script>
import themeService from '@/services/theme'

export default {
  name: 'App',
  data() {
    return {
      isDark: false
    }
  },
  created() {
    this.isDark = themeService.getTheme()
    themeService.setTheme(this.isDark)
  },
  methods: {
    toggleTheme() {
      this.isDark = !this.isDark
      themeService.setTheme(this.isDark)
    }
  }
}
</script>

<style>
@import 'bootstrap/dist/css/bootstrap.min.css';
@import 'bootstrap-icons/font/bootstrap-icons.css';

/* Add to the <style> section in App.vue */
:root {
  --bg-color: #fff;
  --text-color: #212529;
  --card-bg: #f8f9fa;
  --border-color: #dee2e6;
  --primary-color: #0d6efd;
  --secondary-color: #6c757d;
  --input-bg: #fff;
  --input-border: #ced4da;
  --table-stripe: rgba(0, 0, 0, 0.05);
  --nav-link: #495057;
  --nav-link-active: #0d6efd;
  --dropdown-bg: #fff;
  --dropdown-link-hover: #f8f9fa;
}

.dark-theme {
  --bg-color: #121212;
  --text-color: #e1e1e1;
  --card-bg: #1e1e1e;
  --border-color: #2d2d2d;
  --primary-color: #4d94ff; /* Brighter blue for better contrast */
  --secondary-color: #a0a0a0; /* Lighter gray for better contrast */
  --input-bg: #2c2c2c;
  --input-border: #444;
  --table-stripe: rgba(255, 255, 255, 0.05);
  --nav-link: #b0b0b0;
  --nav-link-active: #4d94ff;
  --dropdown-bg: #2c2c2c;
  --dropdown-link-hover: #383838;
}


body {
  background-color: var(--bg-color);
  color: var(--text-color);
  transition: background-color 0.3s, color 0.3s;
}

.navbar {
  background-color: var(--card-bg);
  border-bottom: 1px solid var(--border-color);
}

.navbar-brand {
  color: var(--text-color);
}

.card {
  background-color: var(--card-bg);
  border-color: var(--border-color);
}

.table {
  color: var(--text-color);
}

.table-striped > tbody > tr:nth-of-type(odd) {
  background-color: var(--table-stripe);
}

.theme-toggle {
  background: none;
  border: none;
  color: var(--text-color);
  font-size: 1.2rem;
}

.btn-primary {
  background-color: var(--primary-color);
  border-color: var(--primary-color);
}

.btn-secondary {
  background-color: var(--secondary-color);
  border-color: var(--secondary-color);
}

.form-control, .form-select {
  background-color: var(--input-bg);
  border-color: var(--input-border);
  color: var(--text-color);
}

.form-control:focus, .form-select:focus {
  background-color: var(--input-bg);
  color: var(--text-color);
}

.nav-tabs .nav-link {
  color: var(--nav-link);
}

.nav-tabs .nav-link.active {
  background-color: transparent;
  border-color: transparent;
  color: var(--nav-link-active);
}

.dropdown-menu {
  background-color: var(--dropdown-bg);
  border-color: var(--border-color);
}

.dropdown-item {
  color: var(--text-color);
}

.dropdown-item:hover {
  background-color: var(--dropdown-link-hover);
}

.modal-content {
  background-color: var(--card-bg);
  border-color: var(--border-color);
}

.modal-header, .modal-footer {
  border-color: var(--border-color);
}
a {
  color: var(--primary-color);
}

.dark-theme a {
  color: #6ca9ff; /* Brighter for dark mode */
}
.form-control:focus, .form-select:focus {
  background-color: var(--input-bg);
  color: var(--text-color);
  box-shadow: 0 0 0 0.25rem rgba(77, 148, 255, 0.25);
}

</style>

// File: src/components/HelloWorld.vue
<template>
  <div class="hello">
    <h1>{{ msg }}</h1>
    <p>
      For a guide and recipes on how to configure / customize this project,<br>
      check out the
      <a href="https://cli.vuejs.org" target="_blank" rel="noopener">vue-cli documentation</a>.
    </p>
    <h3>Installed CLI Plugins</h3>
    <ul>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel" target="_blank" rel="noopener">babel</a></li>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-router" target="_blank" rel="noopener">router</a></li>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">eslint</a></li>
    </ul>
    <h3>Essential Links</h3>
    <ul>
      <li><a href="https://vuejs.org" target="_blank" rel="noopener">Core Docs</a></li>
      <li><a href="https://forum.vuejs.org" target="_blank" rel="noopener">Forum</a></li>
      <li><a href="https://chat.vuejs.org" target="_blank" rel="noopener">Community Chat</a></li>
      <li><a href="https://twitter.com/vuejs" target="_blank" rel="noopener">Twitter</a></li>
      <li><a href="https://news.vuejs.org" target="_blank" rel="noopener">News</a></li>
    </ul>
    <h3>Ecosystem</h3>
    <ul>
      <li><a href="https://router.vuejs.org" target="_blank" rel="noopener">vue-router</a></li>
      <li><a href="https://vuex.vuejs.org" target="_blank" rel="noopener">vuex</a></li>
      <li><a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">vue-devtools</a></li>
      <li><a href="https://vue-loader.vuejs.org" target="_blank" rel="noopener">vue-loader</a></li>
      <li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li>
    </ul>
  </div>
</template>

<script>
export default {
  name: 'HelloWorld',
  props: {
    msg: String
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
h3 {
  margin: 40px 0 0;
}
ul {
  list-style-type: none;
  padding: 0;
}
li {
  display: inline-block;
  margin: 0 10px;
}
a {
  color: #42b983;
}
</style>

// File: src/main.js
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'
import 'bootstrap'
import 'bootstrap-icons/font/bootstrap-icons.css'

createApp(App).use(router).mount('#app')

// File: src/router/index.js
import { createRouter, createWebHistory } from 'vue-router'
import UserList from '@/views/UserList.vue'
import UserDetail from '@/views/UserDetail.vue'
import UserForm from '@/views/UserForm.vue'

const routes = [
  {
    path: '/',
    redirect: '/users'
  },
  {
    path: '/users',
    name: 'UserList',
    component: UserList
  },
  {
    path: '/users/new',
    name: 'CreateUser',
    component: UserForm
  },
  {
    path: '/users/:id',
    name: 'UserDetail',
    component: UserDetail
  },
  {
    path: '/users/:id/edit',
    name: 'EditUser',
    component: UserForm
  }
]

const router = createRouter({
  history: createWebHistory(process.env.BASE_URL),
  routes
})

export default router

// File: src/services/api.js
import axios from 'axios'

const API_URL = 'http://localhost:8080/api'

export default {
  getUsers() {
    return axios.get(`${API_URL}/users`)
  },
  
  getUser(id) {
    return axios.get(`${API_URL}/users/${id}`)
  },
  
  createUser(userData) {
    return axios.post(`${API_URL}/users`, userData)
  },
  
  updateUser(id, userData) {
    return axios.put(`${API_URL}/users/${id}`, userData)
  },
  
  deleteUser(id) {
    return axios.delete(`${API_URL}/users/${id}`)
  }
}

// File: src/services/theme.js
// src/services/theme.js
export default {
  setTheme(isDark) {
    if (isDark) {
      document.body.classList.add('dark-theme')
    } else {
      document.body.classList.remove('dark-theme')
    }
    localStorage.setItem('darkMode', isDark)
  },
  
  getTheme() {
    // Fix: Return a boolean instead of the string 'true'
    return localStorage.getItem('darkMode') === 'true'
  }
}

// File: src/views/AboutView.vue
<template>
  <div class="about">
    <h1>This is an about page</h1>
  </div>
</template>

// File: src/views/HomeView.vue
<template>
  <div class="home">
    <img alt="Vue logo" src="../assets/logo.png">
    <HelloWorld msg="Welcome to Your Vue.js App"/>
  </div>
</template>

<script>
// @ is an alias to /src
import HelloWorld from '@/components/HelloWorld.vue'

export default {
  name: 'HomeView',
  components: {
    HelloWorld
  }
}
</script>

// File: src/views/UserDetail.vue
<template>
    <div class="user-detail">
      <div class="d-flex align-items-center mb-4">
        <router-link to="/users" class="btn btn-link">
          <i class="bi bi-arrow-left"></i> Back to Users
        </router-link>
      </div>
      
      <div v-if="loading" class="text-center">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      
      <div v-else-if="error" class="alert alert-danger">
        {{ error }}
      </div>
      
      <div v-else>
        <div class="user-header d-flex align-items-center mb-4">
          <div class="user-avatar">
            {{ getInitials(user.name || user.email) }}
          </div>
          <div class="ms-3">
            <h2>{{ user.email }}</h2>
            <div class="text-muted">{{ user.user_id }}</div>
          </div>
          <div class="ms-auto">
            <div class="dropdown">
              <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                Actions
              </button>
              <ul class="dropdown-menu">
                <li><router-link class="dropdown-item" :to="`/users/${user.user_id}/edit`">Edit</router-link></li>
                <li><a class="dropdown-item text-danger" href="#" @click.prevent="confirmDelete">Delete</a></li>
              </ul>
            </div>
          </div>
        </div>
        
        <ul class="nav nav-tabs mb-4">
          <li class="nav-item">
            <a class="nav-link active" href="#">Details</a>
          </li>
        </ul>
        
        <div class="card">
          <div class="card-body">
            <div class="row mb-4">
              <div class="col-md-4">
                <label class="form-label">Name</label>
                <div>{{ user.name || user.email }}</div>
                <div class="mt-2">
                  <router-link :to="`/users/${user.user_id}/edit`" class="btn btn-sm btn-link p-0">Edit</router-link>
                </div>
              </div>
              
              <div class="col-md-4">
                <label class="form-label">Email</label>
                <div>{{ user.email }}</div>
                <div class="mt-2">
                  <router-link :to="`/users/${user.user_id}/edit`" class="btn btn-sm btn-link p-0">Edit</router-link>
                </div>
              </div>
              
              <div class="col-md-4">
                <label class="form-label">Username</label>
                <div>{{ user.username || 'Not set' }}</div>
                <div class="mt-2">
                  <router-link :to="`/users/${user.user_id}/edit`" class="btn btn-sm btn-link p-0">Edit</router-link>
                </div>
              </div>
            </div>
            
            <div class="row mb-4">
              <div class="col-md-4">
                <label class="form-label">Phone Number</label>
                <div>
                  <span class="badge bg-secondary">UNVERIFIED</span>
                </div>
                <div class="mt-2">
                  <router-link :to="`/users/${user.user_id}/edit`" class="btn btn-sm btn-link p-0">Edit</router-link>
                </div>
              </div>
              
              <div class="col-md-4">
                <label class="form-label">Signed Up</label>
                <div>{{ formatDate(user.created_at) }}</div>
              </div>
              
              <div class="col-md-4">
                <label class="form-label">Primary Identity Provider</label>
                <div>{{ user.identities && user.identities[0] ? user.identities[0].provider : 'Database' }}</div>
              </div>
            </div>
            
            <div class="row mb-4">
              <div class="col-md-4">
                <label class="form-label">Latest Login</label>
                <div>{{ formatDate(user.last_login) }}</div>
              </div>
              
              <div class="col-md-4">
                <label class="form-label">Accounts Associated</label>
                <div>None</div>
              </div>
              
              <div class="col-md-4">
                <label class="form-label">Browser</label>
                <div>Other 0.0.0 / Windows 0.0.0</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Delete Confirmation Modal -->
      <div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true" ref="deleteModal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Confirm Delete</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              Are you sure you want to delete this user?
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-danger" @click="deleteUser">Delete</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </template>
  
  <script>
  import api from '@/services/api'
  import { Modal } from 'bootstrap'
  
  export default {
    name: 'UserDetail',
    data() {
      return {
        user: {},
        loading: true,
        error: null,
        deleteModal: null
      }
    },
    mounted() {
      this.fetchUser()
      this.deleteModal = new Modal(this.$refs.deleteModal)
    },
    methods: {
      async fetchUser() {
        this.loading = true
        try {
          const response = await api.getUser(this.$route.params.id)
          this.user = response.data
          this.error = null
        } catch (error) {
          this.error = 'Error loading user details: ' + (error.response?.data?.message || error.message)
        } finally {
          this.loading = false
        }
      },
      getInitials(name) {
        if (!name) return 'U'
        return name.split(' ')
          .map(part => part.charAt(0).toUpperCase())
          .slice(0, 2)
          .join('')
      },
      formatDate(dateString) {
        if (!dateString) return 'Never'
        
        const date = new Date(dateString)
        const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' }
        return date.toLocaleDateString('en-US', options)
      },
      confirmDelete() {
        this.deleteModal.show()
      },
      async deleteUser() {
        try {
          await api.deleteUser(this.user.user_id)
          this.deleteModal.hide()
          this.$router.push('/users')
        } catch (error) {
          this.error = 'Error deleting user: ' + (error.response?.data?.message || error.message)
        }
      }
    }
  }
  </script>
  
  <style scoped>
  .user-avatar {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: var(--primary-color);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.5rem;
  }
  
  .nav-tabs .nav-link.active {
    border-bottom: 2px solid var(--primary-color);
    color: var(--primary-color);
    font-weight: bold;
  }
  </style>
  
// File: src/views/UserForm.vue
<template>
    <div class="user-form">
      <div class="d-flex align-items-center mb-4">
        <router-link to="/users" class="btn btn-link">
          <i class="bi bi-arrow-left"></i> Back to Users
        </router-link>
      </div>
      
      <h2>{{ isEditMode ? 'Edit User' : 'Create User' }}</h2>
      
      <div v-if="loading" class="text-center">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      
      <div v-else-if="error" class="alert alert-danger">
        {{ error }}
      </div>
      
      <form v-else @submit.prevent="submitForm" class="card mt-4">
        <div class="card-body">
          <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input 
              type="email" 
              id="email" 
              v-model="formData.email" 
              class="form-control" 
              required
            />
          </div>
          
          <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <input 
              type="text" 
              id="name" 
              v-model="formData.name" 
              class="form-control"
            />
          </div>
          
          <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <input 
              type="text" 
              id="username" 
              v-model="formData.username" 
              class="form-control"
            />
          </div>
          
          <div v-if="!isEditMode" class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input 
              type="password" 
              id="password" 
              v-model="formData.password" 
              class="form-control"
              required
            />
            <small class="form-text text-muted">
              Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.
            </small>
          </div>
          
          <div v-if="!isEditMode" class="mb-3">
            <label for="connection" class="form-label">Connection</label>
            <select id="connection" v-model="formData.connection" class="form-select">
              <option value="Username-Password-Authentication">Username-Password-Authentication</option>
              <option value="google-oauth2">Google OAuth2</option>
              <option value="Satya-test-db">Satya-test-db</option>
            </select>
          </div>
        </div>
        
        <div class="card-footer">
          <button type="submit" class="btn btn-primary">{{ isEditMode ? 'Update' : 'Create' }}</button>
          <router-link to="/users" class="btn btn-secondary ms-2">Cancel</router-link>
        </div>
      </form>
    </div>
  </template>
  
  <script>
  import api from '@/services/api'
  
  export default {
    name: 'UserForm',
    data() {
      return {
        formData: {
          email: '',
          name: '',
          username: '',
          password: '',
          connection: 'Username-Password-Authentication'
        },
        loading: false,
        error: null
      }
    },
    computed: {
      isEditMode() {
        return !!this.$route.params.id
      }
    },
    mounted() {
      if (this.isEditMode) {
        this.fetchUser()
      }
    },
    methods: {
      async fetchUser() {
        this.loading = true
        try {
          const response = await api.getUser(this.$route.params.id)
          const userData = response.data
          
          this.formData = {
            email: userData.email || '',
            name: userData.name || '',
            username: userData.username || '',
                  }
          
          this.error = null
        } catch (error) {
          this.error = 'Error loading user: ' + (error.response?.data?.message || error.message)
        } finally {
          this.loading = false
        }
      },
      async submitForm() {
        this.loading = true
        try {
          if (this.isEditMode) {
            await api.updateUser(this.$route.params.id, this.formData)
          } else {
            await api.createUser(this.formData)
          }
          
          this.$router.push('/users')
        } catch (error) {
          this.error = `Error ${this.isEditMode ? 'updating' : 'creating'} user: ` + 
                      (error.response?.data?.message || error.message)
        } finally {
          this.loading = false
        }
      }
    }
  }
  </script>
  
// File: src/views/UserList.vue
<template>
    <div class="users-container">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Users</h2>
        <router-link to="/users/new" class="btn btn-primary">
          <i class="bi bi-plus"></i> Create User
        </router-link>
      </div>
      
      <div class="mb-4">
        <div class="input-group">
          <span class="input-group-text"><i class="bi bi-search"></i></span>
          <input type="text" class="form-control" placeholder="Search for users" v-model="searchQuery">
          <button class="btn btn-outline-secondary" @click="searchQuery = ''">Reset</button>
        </div>
      </div>
      
      <div class="table-responsive">
        <table class="table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Connection</th>
              <th>Logins</th>
              <th>Latest Login</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="user in filteredUsers" :key="user.user_id">
              <td>
                <div class="d-flex align-items-center">
                  <div class="user-avatar">
                    {{ getInitials(user.name || user.email) }}
                  </div>
                  <div class="ms-3">
                    <div>{{ user.email }}</div>
                    <div class="text-muted small">{{ user.email }}</div>
                  </div>
                </div>
              </td>
              <td>{{ user.connection || 'Username-Password-Authentication' }}</td>
              <td>{{ user.logins_count || 0 }}</td>
              <td>{{ formatDate(user.last_login) }}</td>
              <td>
                <div class="dropdown">
                  <button class="btn btn-sm btn-link" type="button" data-bs-toggle="dropdown">
                    <i class="bi bi-three-dots"></i>
                  </button>
                  <ul class="dropdown-menu">
                    <li><router-link class="dropdown-item" :to="`/users/${user.user_id}`">View</router-link></li>
                    <li><router-link class="dropdown-item" :to="`/users/${user.user_id}/edit`">Edit</router-link></li>
                    <li><a class="dropdown-item text-danger" href="#" @click.prevent="confirmDelete(user)">Delete</a></li>
                  </ul>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      
      <!-- Delete Confirmation Modal -->
      <div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true" ref="deleteModal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Confirm Delete</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              Are you sure you want to delete this user?
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-danger" @click="deleteUser">Delete</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </template>
  
  <script>
  import api from '@/services/api'
  import { Modal } from 'bootstrap'
  
  export default {
    name: 'UserList',
    data() {
      return {
        users: [],
        searchQuery: '',
        selectedUser: null,
        deleteModal: null
      }
    },
    computed: {
      filteredUsers() {
        if (!this.searchQuery) return this.users
        
        const query = this.searchQuery.toLowerCase()
        return this.users.filter(user => 
          (user.email && user.email.toLowerCase().includes(query)) ||
          (user.name && user.name.toLowerCase().includes(query))
        )
      }
    },
    mounted() {
      this.fetchUsers()
      this.deleteModal = new Modal(this.$refs.deleteModal)
    },
    methods: {
      async fetchUsers() {
        try {
          const response = await api.getUsers()
          this.users = response.data
        } catch (error) {
          console.error('Error fetching users:', error)
        }
      },
      getInitials(name) {
        if (!name) return 'U'
        return name.split(' ')
          .map(part => part.charAt(0).toUpperCase())
          .slice(0, 2)
          .join('')
      },
      formatDate(dateString) {
        if (!dateString) return 'Never'
        
        const date = new Date(dateString)
        const now = new Date()
        const diffDays = Math.floor((now - date) / (1000 * 60 * 60 * 24))
        
        if (diffDays < 1) return 'Today'
        if (diffDays === 1) return 'Yesterday'
        if (diffDays < 7) return `${diffDays} days ago`
        if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`
        if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`
        return `${Math.floor(diffDays / 365)} years ago`
      },
      confirmDelete(user) {
        this.selectedUser = user
        this.deleteModal.show()
      },
      async deleteUser() {
        if (!this.selectedUser) return
        
        try {
          await api.deleteUser(this.selectedUser.user_id)
          this.users = this.users.filter(u => u.user_id !== this.selectedUser.user_id)
          this.deleteModal.hide()
        } catch (error) {
          console.error('Error deleting user:', error)
        }
      }
    }
  }
  </script>
  
  <style scoped>
.users-container {
  background-color: var(--bg-color);
  color: var(--text-color);
}

.table {
  color: var(--text-color);
  background-color: var(--bg-color);
}

.table th {
  border-color: var(--border-color);
}

.table td {
  border-color: var(--border-color);
}

.form-control {
  background-color: var(--input-bg);
  color: var(--text-color);
  border-color: var(--input-border);
}

.form-control:focus {
  background-color: var(--input-bg);
  color: var(--text-color);
}

.user-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background-color: var(--primary-color);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
}

  </style>
